<?php

/**
 * @file
 * Module file for views_litepager.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 * Implements hook_theme().
 *
 * Register views theming functions and those that are defined via views plugin
 * definitions.
 */
function views_litepager_theme($existing, $type, $theme, $path) {

  // Our extra version of pager.
  $hooks['pager_lite'] = [
    'variables' => [
      'tags' => [],
      'quantity' => 9,
      'element' => 0,
      'parameters' => [],
      'route_name' => '<none>',
      'route_parameters' => [],
      'has_next' => FALSE,
    ],
  ];

  return $hooks;
}

/**
 * Implements hook_preprocess().
 *
 * Pager lite preprocess.
 * Part of the logic is from template_preprocess_pager().
 */
function template_preprocess_pager_lite(&$variables) {

  $element = $variables['element'];
  $parameters = $variables['parameters'];
  $route_name = $variables['route_name'];
  $route_parameters = $variables['route_parameters'] ?? [];
  $has_next = $variables['has_next'] ?? FALSE;
  $tags = $variables['tags'];
  $items = [];

  /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
  $pager_manager = \Drupal::service('pager.manager');
  $pager = $pager_manager->getPager($element);

  // Nothing to do if there is no pager.
  if (!isset($pager)) {
    return;
  }

  $pager_max = $pager->getTotalPages();

  // Nothing to do if there is only one page.
  if ($pager_max <= 1) {
    return;
  }

  $current_page = $pager->getCurrentPage();

  // Create the "first" and "previous" links if we are not on the first page.
  if ($current_page > 0) {
    $items['first'] = [];
    $items['first']['attributes'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, 0),
    ];
    $items['first']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    if (isset($tags[0])) {
      $items['first']['text'] = $tags[0];
    }

    $items['previous'] = [];
    $items['previous']['attributes'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page - 1),
    ];
    $items['previous']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    if (isset($tags[1])) {
      $items['previous']['text'] = $tags[1];
    }
  }

  if ($has_next) {
    $items['next'] = [];
    $items['next']['attributes'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $current_page + 1),
    ];
    $items['next']['href'] = Url::fromRoute($route_name, $route_parameters, $options)->toString();
    if (isset($tags[3])) {
      $items['next']['text'] = $tags[3];
    }
  }

  $variables['items'] = $items;
  $variables['heading_id'] = Html::getUniqueId('pagination-heading');

  // The rendered link needs to play well with any other query parameter used
  // on the page, like exposed filters, so for the cacheability all query
  // parameters matter.
  $variables['#cache']['contexts'][] = 'url.query_args';

}
